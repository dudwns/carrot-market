// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
 // 
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma" // foreign key constraint를 지원하는 작업을 prisma가 할 것으로 지정 
}

model User {
  id              Int @id @default(autoincrement()) //ID 이 model의 ID로 사용하고(식별), 자동으로 증가(1, 2, 3, 4, 5...)
  phone           String? @unique // 전화번호, 중복x
  email           String? @unique // 이메일, 중복x
  name            String // 이름, required
  avatar          String? // 프로필 이미지
  createAt        DateTime @default(now()) //생성 날짜, 기본값은 생성 시점의 날짜
  updateAt        DateTime @updatedAt // 유저가 업데이트 될 때마다 이 field가 변할 것이다.
  tokens          Token[]
  products        Product[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  fav             Fav[]
  sales           Sale[]
  purchases       Purchase[]
  record          Record[]
  streams         Stream[]
  messages        Message[]
  writtenChats    Chat[] @relation(name: "writtenChats")
  receivedChats   Chat[] @relation(name: "receivedChats")
  chatMessages    ChatMessage[]
}

model Token {
  id        Int @id @default(autoincrement()) //ID 이 model의 ID로 사용하고(식별), 자동으로 증가(1, 2, 3, 4, 5...)
  payload   String @unique
  user      User  @relation(fields: [userId], references: [id], onDelete:Cascade) //userId가 User의 id를 가리킨다, user가 삭제됐을 때 토큰도 같이 삭제
  userId    Int
  createAt  DateTime @default(now()) //생성 날짜, 기본값은 생성 시점의 날짜
  updateAt  DateTime @updatedAt // 유저가 업데이트 될 때마다 이 field가 변할 것이다.
  
  @@index([userId])
}


model Product {
  id          Int @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String?
  name        String
  price       Int
  description String @db.MediumText
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  record      Record[]
  chats       Chat[]
  
  @@index([userId])
}

model Post {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  question    String      @db.MediumText
  latitude    Float?
  longitude   Float?
  answers     Answer[]
  wonderings  Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText

   @@index([userId])
   @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

   @@index([userId])
   @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)

  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  kind      String
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Stream {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  description   String @db.MediumText
  price         Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  messages      Message[]
  cloudflareId  String?
  cloudflareUrl String?
  cloudflareKey String?

  @@index([userId])
}

model Message {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  message      String
  stream       Stream     @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId     Int

  @@index([userId])
  @@index([streamId])
}

model Chat {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt 
  createdBy     User     @relation(name: "writtenChats", fields: [createdById], references: [id], onDelete: Cascade)
  createdById   Int      
  createdFor    User     @relation(name: "receivedChats", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId  Int    
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  chatMessages  ChatMessage[]

  @@index([createdById])
  @@index([createdForId])
  @@index([productId])
}

model ChatMessage {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  message      String
  chat         Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId       Int

  @@index([userId])
  @@index([chatId])
}